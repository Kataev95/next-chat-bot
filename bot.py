# bot.py - DEBUG VERSION —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
import os
from flask import Flask, request, jsonify
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters
import json
from datetime import datetime
import traceback

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBAPP_URL = os.environ.get('WEBAPP_URL', 'https://username.github.io/next-tg-chat')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ Telegram Bot
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}  # {user_id: {'nickname': str, 'chat_id': int}}

def log(message):
    '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π'''
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f'[{timestamp}] {message}')

@app.route('/')
def index():
    return '''<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>The Next Chat Bot - DEBUG</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            background: #0a0a0a;
            color: #0f0;
            padding: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0, 255, 0, 0.05);
            padding: 20px;
            border: 2px solid #0f0;
            border-radius: 10px;
        }
        h1 { color: #0ff; text-align: center; }
        .status { color: #0f0; font-weight: bold; }
        .error { color: #f00; }
        .info { color: #ff0; }
        table { width: 100%; margin: 20px 0; border-collapse: collapse; }
        td { padding: 10px; border-bottom: 1px solid #333; }
        td:first-child { color: #0ff; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ The Next Chat Bot</h1>
        <p class="status">‚úÖ Status: Running (DEBUG MODE)</p>

        <table>
            <tr>
                <td>üë• Active Users:</td>
                <td>''' + str(len(active_users)) + '''</td>
            </tr>
            <tr>
                <td>üåê Web App URL:</td>
                <td>''' + WEBAPP_URL + '''</td>
            </tr>
            <tr>
                <td>üîë Bot Token:</td>
                <td>''' + BOT_TOKEN[:10] + '''...</td>
            </tr>
        </table>

        <h3>üìä Endpoints:</h3>
        <ul>
            <li><a href="/webhook-info" style="color: #0ff;">/webhook-info</a> - Check webhook status</li>
            <li><a href="/users" style="color: #0ff;">/users</a> - List active users</li>
            <li>/setwebhook?url=YOUR_URL - Set webhook</li>
        </ul>

        <h3>üë• Online Users:</h3>
        <ul>
        ''' + '\n'.join([f'<li>@{u["nickname"]} (ID: {uid})</li>' for uid, u in active_users.items()]) + '''
        </ul>
    </div>
</body>
</html>'''

@app.route('/webhook', methods=['POST'])
def webhook():
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram'''
    try:
        log('üì® Received webhook request')
        data = request.get_json(force=True)
        log(f'üì¶ Raw data: {json.dumps(data)[:200]}...')

        update = Update.de_json(data, bot)
        log(f'‚úÖ Update parsed successfully')

        if update.message:
            log(f'üí¨ Message from user {update.message.from_user.id}')

            if update.message.web_app_data:
                log('üåê Web App data detected')
                handle_webapp_data(update)
            else:
                log('üìù Regular message')
                handle_message(update.message)
        else:
            log('‚ö†Ô∏è Update without message')

        return 'ok'
    except Exception as e:
        log(f'‚ùå ERROR in webhook: {e}')
        log(f'üìú Traceback: {traceback.format_exc()}')
        return 'error', 500

def handle_message(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥'''
    chat_id = message.chat_id
    user_id = message.from_user.id
    log(f'üì® Handling message from user {user_id}, chat {chat_id}')

    if message.text == '/start':
        log('üöÄ /start command')
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text='üöÄ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç',
                web_app=WebAppInfo(url=WEBAPP_URL)
            )]
        ])

        welcome_text = f'''üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç The Next! (DEBUG MODE)

üéØ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç

‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –í—ã–±–æ—Ä —Å–≤–æ–µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª-—Ç–∞–π–º
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –Ω–µ–æ–Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω

üë• –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω: {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!'''

        bot.send_message(
            chat_id=chat_id,
            text=welcome_text,
            reply_markup=keyboard
        )
        log(f'‚úÖ Welcome message sent to {user_id}')

    elif message.text == '/stats':
        log('üìä /stats command')
        nicknames = [u['nickname'] for u in active_users.values()]
        stats_text = f'''üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}

–û–Ω–ª–∞–π–Ω:
{chr(10).join(['‚Ä¢ @' + n for n in nicknames[:15]])}'''

        bot.send_message(chat_id=chat_id, text=stats_text)
        log(f'‚úÖ Stats sent to {user_id}')

    elif message.text == '/debug':
        log('üêõ /debug command')
        debug_text = f'''üêõ DEBUG INFO:

Active users: {len(active_users)}
Users: {list(active_users.keys())}

Bot Token: {BOT_TOKEN[:10]}...
Web App: {WEBAPP_URL}'''

        bot.send_message(chat_id=chat_id, text=debug_text)

def handle_webapp_data(update):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Web App'''
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        raw_data = update.message.web_app_data.data

        log(f'üåê Web App data from {user_id}')
        log(f'üì¶ Raw data: {raw_data}')

        data = json.loads(raw_data)
        log(f'‚úÖ Data parsed: {data}')

        msg_type = data.get('type')
        nickname = data.get('nickname', f'user_{user_id}')

        log(f'üìù Type: {msg_type}, Nickname: {nickname}')

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_users[user_id] = {
            'nickname': nickname,
            'chat_id': chat_id
        }
        log(f'‚úÖ User {user_id} registered as @{nickname}')
        log(f'üë• Total active users: {len(active_users)}')

        if msg_type == 'join':
            log(f'‚ú® User @{nickname} joining chat')
            broadcast_join(nickname, user_id)

        elif msg_type == 'message':
            text = data.get('text', '')
            log(f'üí¨ Message from @{nickname}: {text}')
            broadcast_message(data, user_id)
        else:
            log(f'‚ö†Ô∏è Unknown message type: {msg_type}')

    except Exception as e:
        log(f'‚ùå ERROR in handle_webapp_data: {e}')
        log(f'üìú Traceback: {traceback.format_exc()}')

def broadcast_join(nickname, user_id):
    '''–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ'''
    text = f"‚ú® @{nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!"
    log(f'üì¢ Broadcasting join: {text}')

    sent_count = 0
    for uid, user_data in active_users.items():
        if uid != user_id:
            try:
                bot.send_message(
                    chat_id=user_data['chat_id'],
                    text=text
                )
                sent_count += 1
                log(f'  ‚úÖ Sent to user {uid}')
            except Exception as e:
                log(f'  ‚ùå Failed to send to {uid}: {e}')

    log(f'üìä Join notification sent to {sent_count} users')

def broadcast_message(data, sender_id):
    '''–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –í–°–ï–ú'''
    sender_nickname = data.get('nickname', active_users.get(sender_id, {}).get('nickname', f'user_{sender_id}'))
    message_text = data.get('text', '')

    log(f'üì¢ BROADCASTING MESSAGE')
    log(f'  From: @{sender_nickname} (ID: {sender_id})')
    log(f'  Text: {message_text}')
    log(f'  Recipients: {len(active_users) - 1} users')

    if not message_text.strip():
        log('‚ö†Ô∏è Empty message, skipping broadcast')
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üí¨ @{sender_nickname}\n{message_text}"
    log(f'  Formatted: {text}')

    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sent_count = 0
    failed_users = []

    for user_id, user_data in list(active_users.items()):
        if user_id == sender_id:
            log(f'  ‚è≠Ô∏è Skipping sender {user_id}')
            continue

        try:
            log(f'  üì§ Sending to user {user_id} (@{user_data["nickname"]}), chat {user_data["chat_id"]}')
            bot.send_message(
                chat_id=user_data['chat_id'],
                text=text
            )
            sent_count += 1
            log(f'    ‚úÖ SUCCESS')
        except Exception as e:
            log(f'    ‚ùå FAILED: {e}')
            failed_users.append(user_id)

    # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
    for user_id in failed_users:
        if user_id in active_users:
            log(f'üóëÔ∏è Removing inactive user {user_id}')
            del active_users[user_id]

    log(f'üìä BROADCAST COMPLETE: sent to {sent_count}/{len(active_users)-1} users')

@app.route('/setwebhook', methods=['GET'])
def set_webhook():
    '''–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook'''
    webhook_url = request.args.get('url')
    if not webhook_url:
        return 'Error: Use /setwebhook?url=YOUR_RENDER_URL', 400

    try:
        log(f'üîß Setting webhook to {webhook_url}/webhook')
        result = bot.set_webhook(url=f'{webhook_url}/webhook')
        if result:
            log('‚úÖ Webhook set successfully')
            return f'‚úÖ Webhook set to {webhook_url}/webhook'
        else:
            log('‚ùå Failed to set webhook')
            return '‚ùå Failed to set webhook', 500
    except Exception as e:
        log(f'‚ùå Error setting webhook: {e}')
        return f'‚ùå Error: {e}', 500

@app.route('/webhook-info', methods=['GET'])
def webhook_info():
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook'''
    try:
        info = bot.get_webhook_info()
        return jsonify({
            'url': info.url,
            'pending_update_count': info.pending_update_count,
            'last_error_date': str(info.last_error_date) if info.last_error_date else None,
            'last_error_message': info.last_error_message,
            'active_users': len(active_users),
            'user_list': [{'id': uid, 'nickname': u['nickname']} for uid, u in active_users.items()]
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/users', methods=['GET'])
def get_users():
    '''–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'''
    try:
        users_list = [
            {
                'nickname': user_data['nickname'],
                'user_id': user_id,
                'chat_id': user_data['chat_id']
            }
            for user_id, user_data in active_users.items()
        ]
        return jsonify({
            'count': len(users_list),
            'users': users_list
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')
    log('‚ïë   The Next Chat Bot - DEBUG MODE             ‚ïë')
    log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù')
    log(f'Bot Token: {BOT_TOKEN[:10]}...')
    log(f'Web App URL: {WEBAPP_URL}')
    log('Starting server...')
    app.run(host='0.0.0.0', port=5000, debug=True)
