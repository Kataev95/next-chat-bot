# bot.py - Telegram Bot –¥–ª—è —á–∞—Ç–∞ The Next
import os
from flask import Flask, request, jsonify
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBAPP_URL = os.environ.get('WEBAPP_URL', 'https://username.github.io/next-tg-chat')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ Telegram Bot
app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
active_users = {}  # {user_id: {'username': str, 'first_name': str, 'chat_id': int}}
messages = []  # [{id, user_id, username, text, timestamp, type}]

@app.route('/')
def index():
    return 'The Next Chat Bot is running! üöÄ'

@app.route('/webhook', methods=['POST'])
def webhook():
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram'''
    try:
        update = Update.de_json(request.get_json(force=True), bot)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Web App
        if update.message and update.message.web_app_data:
            handle_webapp_data(update)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        elif update.message:
            handle_message(update.message)

        return 'ok'
    except Exception as e:
        print(f'Error: {e}')
        return 'error', 500

def handle_message(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥'''
    chat_id = message.chat_id
    user_id = message.from_user.id

    if message.text == '/start':
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π Web App
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                text='üöÄ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç',
                web_app=WebAppInfo(url=WEBAPP_URL)
            )]
        ])

        welcome_text = f'''üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç The Next!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.
–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ
‚Ä¢ –û—Ç–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –ù–µ–æ–Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ {len(active_users)} –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!'''

        bot.send_message(
            chat_id=chat_id,
            text=welcome_text,
            reply_markup=keyboard
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_users[user_id] = {
            'username': message.from_user.username or f'user_{user_id}',
            'first_name': message.from_user.first_name,
            'chat_id': chat_id
        }

        print(f'New user registered: {message.from_user.first_name} (ID: {user_id})')

    elif message.text == '/stats':
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        stats_text = f'''üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ The Next:

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}
üéâ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'''

        bot.send_message(chat_id=chat_id, text=stats_text)

def handle_webapp_data(update):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Web App'''
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        data = json.loads(update.message.web_app_data.data)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if user_id not in active_users:
            active_users[user_id] = {
                'username': update.message.from_user.username or f'user_{user_id}',
                'first_name': update.message.from_user.first_name,
                'chat_id': chat_id
            }

        msg_type = data.get('type')

        if msg_type == 'message':
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            broadcast_message(data, user_id)

        elif msg_type == 'voice':
            # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            broadcast_voice(data, user_id)

        elif msg_type == 'image':
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            broadcast_image(data, user_id)

        elif msg_type == 'video':
            # –í–∏–¥–µ–æ
            broadcast_video(data, user_id)

    except Exception as e:
        print(f'Error handling webapp data: {e}')

def broadcast_message(data, sender_id):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'''
    message = {
        'id': len(messages) + 1,
        'user_id': sender_id,
        'username': active_users[sender_id]['username'],
        'first_name': active_users[sender_id]['first_name'],
        'text': data.get('text', ''),
        'timestamp': datetime.now().isoformat(),
        'type': 'text',
        'reply_to_id': data.get('reply_to_id'),
        'mentions': data.get('mentions', [])
    }

    messages.append(message)
    print(f'New message from {message["first_name"]}: {message["text"]}')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    text = f"üí¨ {message['first_name']}: {message['text']}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    sent_count = 0
    for user_id, user_data in active_users.items():
        if user_id != sender_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            try:
                bot.send_message(
                    chat_id=user_data['chat_id'],
                    text=text
                )
                sent_count += 1
            except Exception as e:
                print(f'Error sending to user {user_id}: {e}')

    print(f'Message broadcasted to {sent_count} users')

def broadcast_voice(data, sender_id):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'''
    text = f"üé§ {active_users[sender_id]['first_name']} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    for user_id, user_data in active_users.items():
        if user_id != sender_id:
            try:
                bot.send_message(chat_id=user_data['chat_id'], text=text)
            except:
                pass

def broadcast_image(data, sender_id):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'''
    text = f"üñº {active_users[sender_id]['first_name']} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    for user_id, user_data in active_users.items():
        if user_id != sender_id:
            try:
                bot.send_message(chat_id=user_data['chat_id'], text=text)
            except:
                pass

def broadcast_video(data, sender_id):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ'''
    text = f"üé• {active_users[sender_id]['first_name']} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –≤–∏–¥–µ–æ"

    for user_id, user_data in active_users.items():
        if user_id != sender_id:
            try:
                bot.send_message(chat_id=user_data['chat_id'], text=text)
            except:
                pass

@app.route('/setwebhook', methods=['GET'])
def set_webhook():
    '''–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏)'''
    webhook_url = request.args.get('url')
    if not webhook_url:
        return 'Error: No webhook URL provided. Use: /setwebhook?url=YOUR_RENDER_URL', 400

    try:
        result = bot.set_webhook(url=f'{webhook_url}/webhook')
        if result:
            return f'‚úÖ Webhook successfully set to {webhook_url}/webhook'
        else:
            return '‚ùå Failed to set webhook', 500
    except Exception as e:
        return f'‚ùå Error setting webhook: {e}', 500

@app.route('/webhook-info', methods=['GET'])
def webhook_info():
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ webhook'''
    try:
        info = bot.get_webhook_info()
        return jsonify({
            'url': info.url,
            'pending_update_count': info.pending_update_count,
            'last_error_date': info.last_error_date,
            'last_error_message': info.last_error_message
        })
    except Exception as e:
        return f'Error: {e}', 500

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    print('Starting The Next Chat Bot...')
    print(f'Bot Token: {BOT_TOKEN[:10]}...')
    print(f'Web App URL: {WEBAPP_URL}')
    app.run(host='0.0.0.0', port=5000, debug=True)
